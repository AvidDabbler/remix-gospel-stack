generator client {
  provider        = "prisma-client-js"
  relationMode    = "prisma"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgres"
  url        = env("DATABASE_URL")
  extensions = [uuidOssp(map: "uuid-ossp"), postgis(version: "3.1.4")]
}

enum Role {
  TC_STAFF
  SUPERADMIN
  ADMIN
  MANAGER
  USER
  CALLCENTER
}

// User can have multiple accounts each account corresponds to an Agency and TCAgency
model User {
  id             String         @id(map: "user_pkey") @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email          String         @unique
  lastName       String
  firstName      String
  default_agency String
  tc_agency_ids  String[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  password       Password?
  accounts       Account[]
  issueIssueId   String?        @db.Uuid
  role           Role           @default(USER)
  avatar         String?
  conversations  Conversation[]
  chats          Chat[]

  @@map("user")
}

model Password {
  hash      String
  profileId String @unique @db.Uuid
  user      User   @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("password")
}

model Token {
  id         String   @id(map: "token_pkey") @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  expires_at DateTime
  createdAt  DateTime
  user_id    String   @db.Uuid

  @@map("token")
}

// Account user ids are not unique, userId and tc_agency_id are unique
model Account {
  id           String   @id(map: "account_pkey") @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId       String   @db.Uuid
  username     String
  tc_agency_id String
  user_type    String   @default("user")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  verified     Boolean  @default(false)
  tcAgency     TCAgency @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction, map: "account_tc_agency")
  agency       Agency   @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: Cascade, map: "account_agency")

  user         User?          @relation(fields: [userId], references: [id])
  Conversation Conversation[]
  chats        Chat[]

  @@unique([tc_agency_id, userId])
  @@map("account")
}

model TCAgency {
  id           String   @id(map: "agencies_pkey") @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  map_layers   Json?    @default("{}") @db.Json
  map_position Json?    @default("{ \"x\": 0, \"y\": 0, \"z\": 0 }") @db.Json
  createdAt    DateTime @default(now())
  tc_agency_id String   @unique(map: "tc_agency_id_key") // ! HUMAN READABLE STRING THAT MAPS TO IMPORT CONFIG ie: stlouis
  agency_name  String
  timezone     String?
  isPaid       Boolean  @default(false)
  state        String?
  updatedAt    DateTime @default(now())

  // agency              Agency?                @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction)
  area                Areas[]
  routes              Routes[]
  stops               Stops[]
  stopUpdates         StopUpdates[]
  stopTimes           StopTimes[]
  trips               Trips[]
  trip_updates        TripUpdates[]
  vehicles            Vehicles[]
  vehiclePositions    VehiclePositions[]
  translations        Translations[]
  transfers           Transfers[]
  timetables          Timetables[]
  timetableStopOrder  TimetableStopOrder[]
  calendars           Calendar[]
  calendarDates       CalendarDates[]
  deadheadTimes       DeadHeadTimes[]
  deadheads           Deadheads[]
  directions          Directions[]
  fareAttribues       FareAttributes[]
  fareProducts        FareProducts[]
  fareRules           FareRules[]
  feedInfo            FeedInfo[]
  freqencies          Frequencies[]
  levels              Levels[]
  opsLocations        OpsLocations[]
  pathways            Pathways[]
  runEvent            RunEvent[]
  runsPieces          RunsPieces[]
  serviceAlertTargets ServiceAlertTargets[]
  serviceAlerts       ServiceAlerts[]
  shapes              Shapes[]
  ShapeGeos           ShapeGeos[]
  StopAttributes      StopAttributes[]
  userIds             String[]
  accounts            Account[]
  conversations       Conversation[]
  chats               Chat[]

  @@map("tcAgency")
}

model Agency {
  id              Int      @id @default(autoincrement())
  tc_agency_id    String   @unique
  agency_id       String?
  agency_name     String
  agency_url      String
  agency_timezone String
  agency_lang     String?
  agency_phone    String?
  agency_fare_url String?
  agency_email    String?
  updatedAt       DateTime

  // tcAgency            TCAgency?
  accounts            Account[]
  conversations       Conversation[]
  chats               Chat[]
  area                Areas[]
  routes              Routes[]
  stops               Stops[]
  stopUpdates         StopUpdates[]
  stopTimes           StopTimes[]
  trips               Trips[]
  trip_updates        TripUpdates[]
  vehicles            Vehicles[]
  vehiclePositions    VehiclePositions[]
  translations        Translations[]
  transfers           Transfers[]
  timetables          Timetables[]
  timetableStopOrder  TimetableStopOrder[]
  calendars           Calendar[]
  calendarDates       CalendarDates[]
  deadheadTimes       DeadHeadTimes[]
  deadheads           Deadheads[]
  directions          Directions[]
  fareAttribues       FareAttributes[]
  fareProducts        FareProducts[]
  fareRules           FareRules[]
  feedInfo            FeedInfo[]
  freqencies          Frequencies[]
  levels              Levels[]
  opsLocations        OpsLocations[]
  pathways            Pathways[]
  runEvent            RunEvent[]
  runsPieces          RunsPieces[]
  serviceAlertTargets ServiceAlertTargets[]
  serviceAlerts       ServiceAlerts[]
  shapes              Shapes[]
  ShapeGeos           ShapeGeos[]
  StopAttributes      StopAttributes[]
  userIds             String[]

  @@map("agency")
}

model Areas {
  tc_agency_id String
  area_id      String   @id
  area_name    String?
  updatedAt    DateTime

  tcAgency TCAgency @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction)
  Agency   Agency?  @relation(fields: [tc_agency_id], references: [tc_agency_id], map: "areas_agency", onDelete: Cascade, onUpdate: NoAction)
  agencyId Int?
}

model Calendar {
  id           String   @id(map: "calendar_pkey") @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  tc_agency_id String
  service_id   String
  monday       Int
  tuesday      Int
  wednesday    Int
  thursday     Int
  friday       Int
  saturday     Int
  sunday       Int
  end_date     Int
  start_date   Int
  updatedAt    DateTime

  tcAgency TCAgency? @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction)
  agency   Agency?   @relation(fields: [tc_agency_id], references: [tc_agency_id], map: "calendar_agency", onDelete: Cascade, onUpdate: NoAction)

  @@unique([service_id, tc_agency_id])
  @@index([end_date], map: "idx_calendar_end_date")
  @@index([start_date], map: "idx_calendar_start_date")
  @@map("calendar")
}

model CalendarDates {
  tc_agency_id   String
  id             Int      @id @default(autoincrement())
  service_id     String
  date           Int
  exception_type Int
  holiday_name   String?
  updatedAt      DateTime

  tcAgency TCAgency? @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction)
  agency   Agency?   @relation(fields: [tc_agency_id], references: [tc_agency_id], map: "calendardates_agency", onDelete: Cascade, onUpdate: NoAction)

  @@index([exception_type], map: "idx_calendar_dates_exception_type")
  @@index([date], map: "idx_calendar_dates_date")
  @@index([service_id], map: "idx_calendar_dates_service_id")
  @@map("calendarDates")
}

model DeadHeadTimes {
  tc_agency_id        String
  id                  Int      @id @default(autoincrement())
  deadhead_id         String
  arrival_time        String
  arrival_timestamp   Int?
  departure_time      String
  departure_timestamp Int?
  ops_location_id     String?
  stop_id             String?
  location_sequence   Int
  shape_dist_traveled Float?
  updatedAt           DateTime

  tcAgency TCAgency @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction)
  Agency   Agency?  @relation(fields: [tc_agency_id], references: [tc_agency_id], map: "dhtimes_agency", onDelete: Cascade, onUpdate: NoAction)
  agencyId Int?

  @@index([location_sequence], map: "idx_deadhead_times_location_sequence")
  @@index([departure_timestamp], map: "idx_deadhead_times_departure_timestamp")
  @@index([arrival_timestamp], map: "idx_deadhead_times_arrival_timestamp")
  @@index([deadhead_id], map: "idx_deadhead_times_deadhead_id")
  @@map("deadheadTimes")
}

model Deadheads {
  tc_agency_id     String
  deadhead_id      String    @id
  service_id       String
  block_id         String
  shape_id         String?
  to_trip_id       String?
  from_trip_id     String?
  to_deadhead_id   String?
  from_deadhead_id String?
  updatedAt        DateTime
  TCAgency         TCAgency? @relation(fields: [tCAgencyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tCAgencyId       String?   @db.Uuid
  Agency           Agency?   @relation(fields: [tc_agency_id], references: [tc_agency_id], map: "dh_agency", onDelete: Cascade, onUpdate: NoAction)
  agencyId         Int?

  @@index([from_deadhead_id], map: "idx_deadheads_from_deadhead_id")
  @@index([to_deadhead_id], map: "idx_deadheads_to_deadhead_id")
  @@index([from_trip_id], map: "idx_deadheads_from_trip_id")
  @@index([to_trip_id], map: "idx_deadheads_to_trip_id")
  @@index([shape_id], map: "idx_deadheads_shape_id")
  @@index([block_id], map: "idx_deadheads_block_id")
  @@map("deadheads")
}

model Directions {
  tc_agency_id String
  id           Int      @id @default(autoincrement())
  route_id     String
  direction_id Int?
  direction    String
  updatedAt    DateTime

  tcAgency TCAgency @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction)
  Agency   Agency?  @relation(fields: [tc_agency_id], references: [tc_agency_id], map: "dir_agency", onDelete: Cascade, onUpdate: NoAction)
  agencyId Int?

  @@index([direction_id], map: "idx_directions_direction_id")
  @@index([route_id], map: "idx_directions_route_id")
  @@map("directions")
}

model FareAttributes {
  tc_agency_id      String
  fare_id           String   @id
  price             Float
  currency_type     String
  payment_method    Int
  transfers         Int?
  agency_id         String?
  transfer_duration Int?
  updatedAt         DateTime

  tcAgency TCAgency @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction)
  Agency   Agency?  @relation(fields: [tc_agency_id], references: [tc_agency_id], map: "fa_agency", onDelete: Cascade, onUpdate: NoAction)
  agencyId Int?

  @@map("fareAttributes")
}

model FareProducts {
  tc_agency_id      String
  fare_product_id   String   @id
  fare_product_name String?
  amount            Float
  currency          String
  updatedAt         DateTime

  tcAgency TCAgency @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction)
  Agency   Agency?  @relation(fields: [tc_agency_id], references: [tc_agency_id], map: "fp_agency", onDelete: Cascade, onUpdate: NoAction)
  agencyId Int?

  @@map("fareProducts")
}

model FareRules {
  tc_agency_id   String
  id             Int      @id @default(autoincrement())
  fare_id        String
  route_id       String?
  origin_id      String?
  destination_id String?
  contains_id    String?
  updatedAt      DateTime

  tcAgency TCAgency @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction)
  Agency   Agency?  @relation(fields: [tc_agency_id], references: [tc_agency_id], map: "fr_agency", onDelete: Cascade, onUpdate: NoAction)
  agencyId Int?

  @@map("fareRules")
}

model FeedInfo {
  tc_agency_id        String
  id                  Int      @id @default(autoincrement())
  feed_publisher_name String
  feed_publisher_url  String
  feed_lang           String
  default_lang        String?
  feed_start_date     Int?
  feed_end_date       Int?
  feed_version        String?
  feed_contact_email  String?
  feed_contact_url    String?
  updatedAt           DateTime

  tcAgency TCAgency @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction)
  Agency   Agency?  @relation(fields: [tc_agency_id], references: [tc_agency_id], map: "fi_agency", onDelete: Cascade, onUpdate: NoAction)
  agencyId Int?

  @@map("feedInfo")
}

model Frequencies {
  tc_agency_id    String
  id              Int      @id @default(autoincrement())
  trip_id         String
  start_time      String
  start_timestamp Int?
  end_time        String
  end_timestamp   Int?
  headway_secs    Int
  exact_times     Int?
  updatedAt       DateTime
  agency          TCAgency @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction)
  Agency          Agency?  @relation(fields: [tc_agency_id], references: [tc_agency_id], map: "freq_agency", onDelete: Cascade, onUpdate: NoAction)
  agencyId        Int?

  @@index([trip_id], map: "idx_frequencies_trip_id")
  @@map("frequencies")
}

model Levels {
  tc_agency_id String
  level_id     String   @id
  level_index  Float
  level_name   String?
  updatedAt    DateTime

  tcAgency TCAgency @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction)
  Agency   Agency?  @relation(fields: [tc_agency_id], references: [tc_agency_id], map: "lev_agency", onDelete: Cascade, onUpdate: NoAction)
  agencyId Int?
}

model OpsLocations {
  tc_agency_id      String
  ops_location_id   String   @id
  ops_location_code String?
  ops_location_name String
  ops_location_desc String?
  ops_location_lat  Float
  ops_location_lon  Float
  updatedAt         DateTime

  tcAgency TCAgency @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction)
  Agency   Agency?  @relation(fields: [tc_agency_id], references: [tc_agency_id], map: "oploc_agency", onDelete: Cascade, onUpdate: NoAction)
  agencyId Int?

  @@map("opsLocations")
}

model Pathways {
  tc_agency_id           String
  pathway_id             String   @id
  from_stop_id           String
  to_stop_id             String
  pathway_mode           Int
  is_bidirectional       Int
  length                 Float?
  traversal_time         Int?
  stair_count            Int?
  max_slope              Float?
  min_width              Float?
  signposted_as          String?
  reversed_signposted_as String?
  updatedAt              DateTime

  tcAgency TCAgency @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction)
  Agency   Agency?  @relation(fields: [tc_agency_id], references: [tc_agency_id], map: "path_agency", onDelete: Cascade, onUpdate: NoAction)
  agencyId Int?

  @@map("pathways")
}

model Routes {
  agency_id              String?
  tc_agency_id           String
  route_id               String   @id
  route_short_name       String?
  route_long_name        String?
  alias_route_short_name String?
  alias_route_long_name  String?
  route_desc             String?
  route_type             Int
  route_url              String?
  route_color            String?
  route_text_color       String?
  route_sort_order       Int?
  continuous_pickup      Int?
  continuous_drop_off    Int?
  network_id             String?
  updatedAt              DateTime

  tcAgency      TCAgency       @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction)
  Vehicles      Vehicles[]
  StopUpdates   StopUpdates[]
  Agency        Agency?        @relation(fields: [tc_agency_id], references: [tc_agency_id], map: "_agency", onDelete: Cascade, onUpdate: NoAction)
  agencyId      Int?
  conversations Conversation[]
  chats         Chat[]
  Trips         Trips?         @relation(fields: [tripsTrip_id], references: [trip_id])
  tripsTrip_id  String?

  @@unique([tc_agency_id, route_id])
  @@map("routes")
}

model RunEvent {
  tc_agency_id             String
  run_event_id             String   @id
  piece_id                 String
  event_type               Int
  event_name               String?
  event_time               String
  event_duration           Int
  event_from_location_type Int?
  event_from_location_id   String?
  event_to_location_type   Int?
  event_to_location_id     String?
  updatedAt                DateTime

  tcAgency TCAgency @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction)
  Agency   Agency?  @relation(fields: [tc_agency_id], references: [tc_agency_id], map: "_agency", onDelete: Cascade, onUpdate: NoAction)
  agencyId Int?

  @@index([event_to_location_type], map: "idx_run_event_event_to_location_type")
  @@index([event_from_location_type], map: "idx_run_event_event_from_location_type")
  @@index([event_type], map: "idx_run_event_event_type")
  @@map("runEvent")
}

model RunsPieces {
  tc_agency_id        String
  run_id              String
  piece_id            String   @id
  start_type          Int
  start_trip_id       String
  start_trip_position Int?
  end_type            Int
  end_trip_id         String
  end_trip_position   Int?
  updatedAt           DateTime

  tcAgency TCAgency @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction)
  Agency   Agency?  @relation(fields: [tc_agency_id], references: [tc_agency_id], map: "_agency", onDelete: Cascade, onUpdate: NoAction)
  agencyId Int?

  @@index([end_trip_id], map: "idx_runs_pieces_end_trip_id")
  @@index([end_type], map: "idx_runs_pieces_end_type")
  @@index([start_trip_id], map: "idx_runs_pieces_start_trip_id")
  @@index([start_type], map: "idx_runs_pieces_start_type")
  @@map("runsPieces")
}

model ServiceAlertTargets {
  tc_agency_id String
  alert_id     String   @id
  stop_id      String?
  route_id     String?
  isUpdated    Int      @default(1)
  updatedAt    DateTime
  agency       TCAgency @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction)
  Agency       Agency?  @relation(fields: [tc_agency_id], references: [tc_agency_id], map: "_agency", onDelete: Cascade, onUpdate: NoAction)
  agencyId     Int?

  @@index([route_id], map: "idx_service_alert_targets_route_id")
  @@index([stop_id], map: "idx_service_alert_targets_stop_id")
  @@index([alert_id], map: "idx_service_alert_targets_alert_id")
  @@map("serviceAlertTargets")
}

model ServiceAlerts {
  tc_agency_id String
  id           String   @id
  cause        Int
  start_time   String
  end_time     String
  headline     String
  description  String
  isUpdated    Int      @default(1)
  updatedAt    DateTime
  agency       TCAgency @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction)
  Agency       Agency?  @relation(fields: [tc_agency_id], references: [tc_agency_id], map: "_agency", onDelete: Cascade, onUpdate: NoAction)
  agencyId     Int?

  @@index([id], map: "idx_service_alerts_id")
  @@map("serviceAlerts")
}

model Shapes {
  id                  Int      @id @default(autoincrement())
  tc_agency_id        String
  shape_id            String
  shape_pt_lat        Float
  shape_pt_lon        Float
  shape_pt_sequence   Int
  shape_dist_traveled Float?
  updatedAt           DateTime
  agency              TCAgency @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction)
  Agency              Agency?  @relation(fields: [tc_agency_id], references: [tc_agency_id], map: "_agency", onDelete: Cascade, onUpdate: NoAction)
  agencyId            Int?

  @@index([shape_id], map: "idx_shapes_shape_id")
  @@map("shapes")
}

model ShapeGeos {
  tc_agency_id String
  shape_id     String
  updatedAt    DateTime
  geom         Unsupported("geometry(LineString, 4326)")? // https://github.com/prisma/prisma/issues/1798
  agency       TCAgency                                   @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction)
  Agency       Agency?                                    @relation(fields: [tc_agency_id], references: [tc_agency_id], map: "_agency", onDelete: Cascade, onUpdate: NoAction)
  agencyId     Int?

  @@id([tc_agency_id, shape_id])
  @@index([geom], name: "shape_geom_idx", type: Gist)
  @@map("shapesGeos")
}

model StopAttributes {
  tc_agency_id String
  id           Int      @id @default(autoincrement())
  stop_id      String
  stop_city    String?
  updatedAt    DateTime
  agency       TCAgency @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction)
  Agency       Agency?  @relation(fields: [tc_agency_id], references: [tc_agency_id], map: "_agency", onDelete: Cascade, onUpdate: NoAction)
  agencyId     Int?

  @@index([stop_id], map: "idx_stop_attributes_stop_id")
  @@map("stopAttributes")
}

model StopTimes {
  tc_agency_id        String
  id                  Int      @id @default(autoincrement())
  trip_id             String
  arrival_time        String?
  arrival_timestamp   Int?
  departure_time      String?
  departure_timestamp Int?
  stop_id             String
  stop_sequence       Int
  stop_headsign       String?
  pickup_type         Int?
  drop_off_type       Int?     @default(0)
  continuous_pickup   Int?
  continuous_drop_off Int?
  shape_dist_traveled Float?
  timepoint           Int?
  updatedAt           DateTime
  trip                Trips?   @relation(fields: [tc_agency_id, trip_id], references: [tc_agency_id, trip_id], onDelete: NoAction, onUpdate: NoAction)

  tcAgency TCAgency? @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction)
  Agency   Agency?   @relation(fields: [tc_agency_id], references: [tc_agency_id], map: "_agency", onDelete: Cascade, onUpdate: NoAction)
  agencyId Int?

  @@index([stop_sequence], map: "idx_stop_times_stop_sequence")
  @@index([departure_timestamp], map: "idx_stop_times_departure_timestamp")
  @@index([arrival_timestamp], map: "idx_stop_times_arrival_timestamp")
  @@index([trip_id], map: "idx_stop_times_trip_id")
  @@map("stopTimes")
}

model Stops {
  tc_agency_id        String
  stop_id             String                                @id
  stop_code           String?
  stop_name           String?
  tts_stop_name       String?
  stop_desc           String?                               @default("")
  stop_lat            Float?
  stop_lon            Float?
  zone_id             String?
  stop_url            String?
  location_type       Int?
  parent_station      String?
  stop_timezone       String?
  wheelchair_boarding Int?
  level_id            String?
  platform_code       String?
  updatedAt           DateTime
  geom                Unsupported("geometry(Point, 4326)")? // https://github.com/prisma/prisma/issues/1798
  agency              TCAgency                              @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction)
  StopUpdates         StopUpdates[]
  Agency              Agency?                               @relation(fields: [tc_agency_id], references: [tc_agency_id], map: "_agency", onDelete: Cascade, onUpdate: NoAction)
  agencyId            Int?
  conversations       Conversation[]
  chats               Chat[]

  @@unique([stop_id, tc_agency_id])
  @@index([parent_station], map: "idx_stops_parent_station")
  @@index([geom], name: "stops_idx", type: Gist)
  @@map("stops")
}

model TimetableStopOrder {
  tc_agency_id  String
  id            Int      @id @default(autoincrement())
  timetable_id  String?
  stop_id       String?
  stop_sequence Int?
  updatedAt     DateTime
  agency        TCAgency @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction)
  Agency        Agency?  @relation(fields: [tc_agency_id], references: [tc_agency_id], map: "_agency", onDelete: Cascade, onUpdate: NoAction)
  agencyId      Int?

  @@index([stop_sequence], map: "idx_timetable_stop_order_stop_sequence")
  @@index([timetable_id], map: "idx_timetable_stop_order_timetable_id")
  @@map("timetableStopOrder")
}

model Timetables {
  tc_agency_id           String
  id                     Int      @id @default(autoincrement())
  timetable_id           String?
  route_id               String?
  direction_id           Int?
  start_date             Int?
  end_date               Int?
  monday                 Int
  tuesday                Int
  wednesday              Int
  thursday               Int
  friday                 Int
  saturday               Int
  sunday                 Int
  start_time             String?
  start_timestamp        Int?
  end_time               String?
  end_timestamp          Int?
  timetable_label        String?
  service_notes          String?
  orientation            String?
  timetable_page_id      String?
  timetable_sequence     Int?
  direction_name         String?
  include_exceptions     Int?
  show_trip_continuation Int?
  updatedAt              DateTime
  agency                 TCAgency @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction)
  Agency                 Agency?  @relation(fields: [tc_agency_id], references: [tc_agency_id], map: "_agency", onDelete: Cascade, onUpdate: NoAction)
  agencyId               Int?

  @@index([timetable_sequence], map: "idx_timetables_timetable_sequence")
  @@map("timetables")
}

model Transfers {
  tc_agency_id      String
  id                Int      @id @default(autoincrement())
  from_stop_id      String?
  to_stop_id        String?
  from_route_id     String?
  to_route_id       String?
  from_trip_id      String?
  to_trip_id        String?
  transfer_type     Int?
  min_transfer_time Int?
  updatedAt         DateTime

  tcAgency TCAgency @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction)
  Agency   Agency?  @relation(fields: [tc_agency_id], references: [tc_agency_id], map: "_agency", onDelete: Cascade, onUpdate: NoAction)
  agencyId Int?

  @@index([to_stop_id], map: "idx_transfers_to_stop_id")
  @@index([from_stop_id], map: "idx_transfers_from_stop_id")
  @@map("transfers")
}

model Translations {
  tc_agency_id  String
  id            Int      @id @default(autoincrement())
  table_name    String
  field_name    String
  language      String
  translation   String
  record_id     String?
  record_sub_id String?
  field_value   String?
  updatedAt     DateTime

  tcAgency TCAgency @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction)
  Agency   Agency?  @relation(fields: [tc_agency_id], references: [tc_agency_id], map: "_agency", onDelete: Cascade, onUpdate: NoAction)
  agencyId Int?

  @@map("translations")
}

model TripUpdates {
  tc_agency_id String
  update_id    String    @id
  vehicle_id   String?
  trip_id      String?
  start_date   String?
  timestamp    String?
  isUpdated    Int       @default(1)
  updatedAt    DateTime
  tcAgency     TCAgency  @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction)
  Trips        Trips?    @relation(fields: [tripsTrip_id], references: [trip_id], onDelete: NoAction, onUpdate: NoAction)
  tripsTrip_id String?
  Vehicles     Vehicles? @relation(fields: [vehiclesId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  vehiclesId   String?   @db.Uuid
  Agency       Agency?   @relation(fields: [tc_agency_id], references: [tc_agency_id], map: "_agency", onDelete: Cascade, onUpdate: NoAction)
  agencyId     Int?

  @@index([trip_id], map: "idx_trip_updates_trip_id")
  @@index([vehicle_id], map: "idx_trip_updates_vehicle_id")
  @@index([update_id], map: "idx_trip_updates_update_id")
  @@map("tripUpdates")
}

model Trips {
  tc_agency_id          String
  route_id              String
  service_id            String
  trip_id               String        @id
  trip_headsign         String?
  trip_short_name       String?
  direction_id          Int?
  block_id              String?
  shape_id              String?
  wheelchair_accessible Int?
  bikes_allowed         Int?
  updatedAt             DateTime
  tcAgency              TCAgency      @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction)
  trip_updates          TripUpdates[]
  Vehicles              Vehicles?
  StopUpdates           StopUpdates[]
  Agency                Agency?       @relation(fields: [tc_agency_id], references: [tc_agency_id], map: "_agency", onDelete: Cascade, onUpdate: NoAction)
  agencyId              Int?
  Routes                Routes[]
  stopTimes             StopTimes[]

  @@unique([tc_agency_id, trip_id])
  @@index([shape_id], map: "idx_trips_shape_id")
  @@index([block_id], map: "idx_trips_block_id")
  @@index([direction_id], map: "idx_trips_direction_id")
  @@index([service_id], map: "idx_trips_service_id")
  @@index([route_id], map: "idx_trips_route_id")
  @@map("trips")
}

model VehiclePositions {
  tc_agency_id String
  update_id    String   @id
  bearing      Float?
  latitude     Float?
  longitude    Float?
  speed        Float?
  trip_id      String?
  vehicle_id   String?
  timestamp    String?
  isUpdated    Int      @default(1)
  updatedAt    DateTime
  tcAgency     TCAgency @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction)
  Agency       Agency?  @relation(fields: [tc_agency_id], references: [tc_agency_id], map: "_agency", onDelete: Cascade, onUpdate: NoAction)
  agencyId     Int?

  @@index([vehicle_id], map: "idx_vehicle_positions_vehicle_id")
  @@index([trip_id], map: "idx_vehicle_positions_trip_id")
  @@index([update_id], map: "idx_vehicle_positions_update_id")
  @@map("vehiclePositions")
}

model Vehicles {
  id           String        @id(map: "vehicles_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  tc_agency_id String
  agency_id    String
  vehicle_id   String        @unique
  trip_id      String        @unique
  route_id     String
  longitude    Float
  latitude     Float
  updatedAt    DateTime      @default(now())
  createdAt    DateTime      @default(now())
  stop_update  StopUpdates[]
  trip_update  TripUpdates[]
  tcAgency     TCAgency      @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction)
  route        Routes        @relation(fields: [route_id], references: [route_id], onDelete: NoAction, onUpdate: NoAction)
  trip         Trips         @relation(fields: [trip_id], references: [trip_id], onDelete: NoAction, onUpdate: NoAction)
  Agency       Agency?       @relation(fields: [tc_agency_id], references: [tc_agency_id], map: "_agency", onDelete: Cascade, onUpdate: NoAction)
  agencyId     Int?
}

model StopUpdates {
  id              String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  tc_agency_id    String
  agency_id       String
  stop_id         String
  stop_sequence   Int
  trip_id         String
  route_id        String
  trip_start_time DateTime
  vehicle_id      String
  direction_id    Int
  delay           Int
  delay_type      String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  tcAgency        TCAgency @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction)
  route           Routes   @relation(fields: [route_id], references: [route_id], onDelete: NoAction, onUpdate: NoAction)
  stop            Stops    @relation(fields: [stop_id], references: [stop_id], onDelete: NoAction, onUpdate: NoAction)
  trip            Trips    @relation(fields: [trip_id], references: [trip_id], onDelete: NoAction, onUpdate: NoAction)
  vehicle         Vehicles @relation(fields: [vehicle_id], references: [vehicle_id], onDelete: NoAction, onUpdate: NoAction)
  Agency          Agency?  @relation(fields: [tc_agency_id], references: [tc_agency_id], map: "_agency", onDelete: Cascade, onUpdate: NoAction)
  agencyId        Int?

  @@map("stopUpdates")
}

model Conversation {
  id           String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  tc_agency_id String
  route_id     String
  stop_id      String
  chats        Chat[]
  accountId    String    @db.Uuid
  route        Routes?   @relation(fields: [route_id, tc_agency_id], references: [route_id, tc_agency_id], onDelete: NoAction, onUpdate: NoAction)
  stop         Stops?    @relation(fields: [stop_id, tc_agency_id], references: [stop_id, tc_agency_id], onDelete: NoAction, onUpdate: NoAction)
  createdBy    Account   @relation(fields: [accountId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())
  TCAgency     TCAgency? @relation(fields: [tCAgencyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tCAgencyId   String?   @db.Uuid
  Agency       Agency?   @relation(fields: [tc_agency_id], references: [tc_agency_id], map: "_agency", onDelete: Cascade, onUpdate: NoAction)
  agencyId     Int?
  User         User?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId       String?   @db.Uuid

  @@map("conversation")
}

model Chat {
  id             String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  tc_agency_id   String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  conversationId String       @db.Uuid
  sender         Account      @relation(fields: [tc_agency_id, userId], references: [tc_agency_id, userId], onDelete: NoAction, onUpdate: NoAction)
  userId         String       @db.Uuid
  message        String
  timestamp      DateTime     @default(now())
  User           User         @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  TCAgency       TCAgency?    @relation(fields: [tCAgencyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tCAgencyId     String?      @db.Uuid
  Agency         Agency?      @relation(fields: [tc_agency_id], references: [tc_agency_id], map: "_agency", onDelete: Cascade, onUpdate: NoAction)
  agencyId       Int?
  Routes         Routes?      @relation(fields: [routesRoute_id], references: [route_id], onDelete: NoAction, onUpdate: NoAction)
  routesRoute_id String?
  Stops          Stops?       @relation(fields: [stopsStop_id], references: [stop_id], onDelete: NoAction, onUpdate: NoAction)
  stopsStop_id   String?

  @@map("chat")
}

// model Complaint {
//   id               String   @id(map: "complaints_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
//   tc_agency_id     String
//   userId           String[] @db.Uuid
//   complaint_id     String   @unique(map: "complaints_id_key") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
//   resolved         Boolean  @default(false)
//   assignGroup      String?
//   description      String
//   contactPhone     String?
//   contactEmail     String?
//   stop_id          String?
//   stop_name        String?
//   route_short_name String
//   route_long_name  String
//   lat              Float?
//   lon              Float?
//   contactFirstName String?
//   contactLastName  String?
//   complaintTypeId  String
//   flagged          Boolean  @default(false)
//   issueComplaintId String?  @db.Uuid
//   createdAt        DateTime @default(now())
//   updatedAt        DateTime @default(now())

//   tcAgency TCAgency @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction, map: "complaint_tc_agency")
//   agency   Agency   @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction, map: "complaint_agency")
//   // complaintType  ComplaintType   @relation(fields: [complaintTypeId], references: [typeId])
//   creator  Account  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
//   // IssueComplaint IssueComplaint? @relation(fields: [issueComplaintId], references: [id])

//   // comment Comment[]

//   @@map("complaint")
// }

// model Comment {
//   id           String   @id(map: "comments_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
//   tc_agency_id String
//   comment      String?  @default("\"\"")
//   userId       String   @db.Uuid
//   agency_id    String?
//   updatedAt    DateTime @default(now())
//   createdAt    DateTime @default(now())
//   complaintId  String?  @db.Uuid

//   complaint Complaint? @relation(fields: [complaintId], references: [id], onDelete: NoAction, onUpdate: NoAction)
//   account   Account    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
//   tcAgency  TCAgency   @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction, map: "comment_tc_agency")
//   agency    Agency     @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction, map: "comment_agency")

//   @@map("comment")
// }

// model ComplaintType {
//   id         String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
//   typeId     String      @unique(map: "complaint_type_id_fkey")
//   typeDescId String
//   typeDesc   String
//   typeGroup  String
//   typeName   String
//   complaint  Complaint[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @default(now())

//   @@map("complaintType")
// }

// model Conversation {
//   id           String   @unique(map: "conversations_id_key") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
//   issueId      String   @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
//   comment      String   @default("\"\"")
//   userId       String   @db.Uuid
//   tc_agency_id String
//   complaintId String   @db.Uuid
//   updatedAt    DateTime @default(now())
//   createdAt    DateTime @default(now())

//   complaint Complaint @relation(fields: [])
//   issue    Issue    @relation(fields: [issueId], references: [id], onDelete: NoAction, onUpdate: NoAction)
//   creator  Account  @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
//   tcAgency TCAgency @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction, map: "conversation_tc_agency")
//   agency   Agency   @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction, map: "conversation_agency")

//   @@map("conversation")
// }

// model Issue {
//   id               String         @unique(map: "issues_id_key") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
//   tc_agency_id     String
//   assignedTo       String?
//   route_long_name  String?
//   route_short_name String?
//   stop_id          String?
//   stop_name        String?
//   resolved         Boolean        @default(false)
//   subscriberIds    String[]       @default([]) @db.Uuid
//   userId           String         @db.Uuid
//   description      String
//   flagged          Boolean        @default(false)
//   issueId          String         @id @unique(map: "issue_id_key") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
//   issueTypeId      String
//   complaintIds     String[]       @default([]) @db.Uuid
//   issueComplaintId String         @unique @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
//   lat              Float?
//   lon              Float?
//   createdAt        DateTime       @default(now())
//   updatedAt        DateTime       @default(now())
//   conversation     Conversation[]
//   tcAgency         TCAgency       @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction, map: "tcagency_issue")
//   issueType        IssueType      @relation(fields: [issueTypeId], references: [type_id])
//   account          Account        @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "creating_user")
//   issueComplaint   IssueComplaint @relation(fields: [issueComplaintId], references: [id])
//   agency           Agency         @relation(fields: [tc_agency_id], references: [tc_agency_id], map: "agency_issue")

//   @@map("issue")
// }

// model IssueComplaint {
//   id               String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
//   issueComplaintId String      @unique @db.Uuid
//   createdAt        DateTime    @default(now())
//   updatedAt        DateTime    @default(now())
//   complaint        Complaint[]
//   issue            Issue?

//   @@map("isssueComplaint")
// }

// model IssueType {
//   id           String  @id(map: "complaint_issues_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
//   type_desc    String
//   type_desc_id String
//   type_group   String
//   type_id      String  @unique(map: "issue_type_id_fkey")
//   issue        Issue[]

//   @@map("issueType")
// }

// model Notification {
//   id              String   @id(map: "notifications_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
//   tc_agency_id    String
//   user_id         String   @db.Uuid
//   freq            Decimal? @default(24) @db.Decimal
//   route_long_name String?
//   agency_id       String   @db.Uuid
//   complaint_id    String   @db.Uuid
//   createdAt       DateTime @default(now())
//   updatedAt       DateTime @default(now())
//   agency          TCAgency @relation(fields: [tc_agency_id], references: [tc_agency_id], onDelete: NoAction, onUpdate: NoAction)
//   Agency          Agency?  @relation(fields: [agencyId], references: [id])
//   agencyId        Int?
//   Account         Account? @relation(fields: [accountId], references: [id])
//   accountId       String?  @db.Uuid

//   @@map("notification")
// }

// model Route {
//   id               String       @id(map: "routes_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
//   agency_id        String
//   route_id         String       @unique
//   route_short_name String
//   route_long_name  String
//   createdAt       DateTime     @default(now())
//   updatedAt       DateTime     @default(now())
//   agency           Agency       @relation(fields: [agency_id], references: [agency_id])
//   stop_update      StopUpdate[]
//   trip             Trip[]
//   vehicle          Vehicle[]

//   @@map("route")
// }

// model Stop {
//   id          String       @id(map: "stops_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
//   agency_id   String
//   stop_id     String       @unique
//   stop_lat    Float
//   stop_lon    Float
//   createdAt  DateTime     @default(now())
//   updatedAt  DateTime     @default(now())
//   agency      Agency       @relation(fields: [agency_id], references: [agency_id])
//   stop_update StopUpdate[]

//   @@map("stop")
// }

// model StopUpdate {
//   id              String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
//   agency_id       String
//   stop_id         String
//   stop_sequence   Int
//   trip_id         String
//   route_id        String
//   trip_start_time DateTime
//   vehicle_id      String
//   direction_id    Int
//   delay           Int
//   delay_type      String
//   createdAt      DateTime @default(now())
//   updatedAt      DateTime @default(now())
//   agency          Agency   @relation(fields: [agency_id], references: [agency_id])
//   route           Route    @relation(fields: [route_id], references: [route_id])
//   stop            Stop     @relation(fields: [stop_id], references: [stop_id])
//   trip            Trip     @relation(fields: [trip_id], references: [trip_id])
//   vehicle         Vehicle  @relation(fields: [vehicle_id], references: [vehicle_id])

//   @@map("stopUpdate")
// }

// model Trip {
//   id              String       @id(map: "trips_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
//   agency_id       String
//   trip_id         String       @unique
//   route_id        String
//   headsign        String
//   createdAt      DateTime     @default(now())
//   updatedAt      DateTime     @default(now())
//   trip_start_time DateTime
//   stop_update     StopUpdate[]
//   agency          Agency       @relation(fields: [agency_id], references: [agency_id])
//   route           Route        @relation(fields: [route_id], references: [route_id])
//   trip_update     TripUpdate[]
//   vehicle         Vehicle?

//   @@map("trip")
// }

// model TripUpdate {
//   id              String   @id(map: "vehicle_update_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
//   agency_id       String
//   trip_id         String
//   route_id        String
//   trip_start_time DateTime
//   vehicle_id      String
//   direction_id    Int
//   delay           Int
//   delay_type      String
//   agency          Agency   @relation(fields: [agency_id], references: [agency_id])
//   trip            Trip     @relation(fields: [trip_id], references: [trip_id])
//   vehicle         Vehicle  @relation(fields: [vehicle_id], references: [vehicle_id])

//   @@map("tripUpdate")
// }

// model Vehicle {
//   id          String       @id(map: "vehicles_pkey") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
//   agency_id   String
//   vehicle_id  String       @unique
//   trip_id     String       @unique
//   route_id    String
//   longitude   Float
//   latitude    Float
//   updatedAt  DateTime     @default(now())
//   createdAt  DateTime     @default(now())
//   stop_update StopUpdate[]
//   trip_update TripUpdate[]
//   agency      Agency       @relation(fields: [agency_id], references: [agency_id])
//   route       Route        @relation(fields: [route_id], references: [route_id])
//   trip        Trip         @relation(fields: [trip_id], references: [trip_id])

//   @@map("vehicle")
// }
